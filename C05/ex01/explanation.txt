The ft_recursive_factorial function calculates the factorial of a non-negative integer nb using recursion.

    Base Cases:
        If nb is less than 0, the function returns 0, as the factorial is not defined for negative numbers.
        If nb is 0, the function returns 1, as the factorial of 0 is defined to be 1.

    Recursive Case:
        For any other positive value of nb, the function returns nb multiplied by the result of ft_recursive_factorial(nb - 1).
        This means the function calls itself with nb - 1 and continues to do so, reducing the value of nb each time, until it reaches the base case.

How Recursion Works

Recursion is a process where a function calls itself to solve smaller instances of the same problem. Hereâ€™s how it works in ft_recursive_factorial:

    For nb = 3, the function returns 3 * ft_recursive_factorial(2).
    For nb = 2, the function returns 2 * ft_recursive_factorial(1).
    For nb = 1, the function returns 1 * ft_recursive_factorial(0).
    For nb = 0, the base case is reached, and the function returns 1.

Each recursive call waits for the result of the next call. Once the base case is reached, the results are returned back up the call stack:

    ft_recursive_factorial(0) returns 1.
    ft_recursive_factorial(1) returns 1 * 1 which is 1.
    ft_recursive_factorial(2) returns 2 * 1 which is 2.
    ft_recursive_factorial(3) returns 3 * 2 which is 6.

So, the final result for ft_recursive_factorial(3) is 6.